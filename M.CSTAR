/*
   Version	1	December 1991

   Simple crystal growth program, diffuses components around a cubic
   lattice. No thermodynamics involved.
   Assumes that once a component "molecule" has reacted it does not diffuse,
   ie., it is assumed to be relatively immobile.
   Because of the cubic lattice, collisions only occur orthogonally.

   Parent program is growth.fth, in SCIFORTH for CPM80, 1985 */


#include <stdlib.h>

/* Shorthand access */
#define AT	   [.] [.] [.]
#define ATXP       [. + 1] [.] [.]
#define ATXM	   [. - 1] [.] [.]
#define ATYP       [.] [. + 1] [.]
#define ATYM	   [.] [. - 1] [.]
#define ATZP  	   [.] [.] [. + 1]
#define ATZM	   [.] [.] [. - 1]
#define ATXPYP	   [. + 1] [. + 1] [.]
#define ATXPYM	   [. + 1] [. - 1] [.]

/* Size of the array and number of components (un/reacted) */
#define SIDE       128
#define COMPONENTS 5

/* Offset for denoting reacted component, and component values */
#define REACTED	 20
#define SOLVENT 0
#define ACPT 1
#define RSOLVENT (SOLVENT + REACTED)
#define RACPT (ACPT + REACTED)
#define BCPT 2
#define RBCPT (BCPT + REACTED)

/* The number of actions allowed on diffusing:
	1  forwards,
	-1 backwards,
	0  stay.

   See Diffuse(int:cube) */
#define DIFFUSEOPTS 	3
#define FORWARDS	1
#define BACKWARDS	-1
#define STAY		0


/* The shape for the simulation. */
shape [SIDE] [SIDE] [SIDE] cube;

int NumberOfIons, /* Number of Ions */
    SPlusA, /* Solvent + Ion A */
    SToA, /* Ratio of Solvent to A */
    SToB, /* Ratio of Solvent to B */
    Suitable, /* contents of new cell */
    OKvar, /* the value of the reaction candidate + 10 */
    NumberOfLooks, /* how many times should random-look look */

/* Some accumulators for collision types

    Name ,  Piccy		Point Group
    ====    ============	===========	*/

    Case1, /* A--B		C (Inf h)	*/

    Case2, /* A--B
    	      |
    	      B */

    Case3, /* B--A--B 		D (Inf h)	*/

    Case4, /* A--B
    	      |\
    	      B B */

    Case5, /* B--A--B
    		 |
    		 B */
    
    Case6, /* B--A--B
    		 |\
    		 B B */

    Case7, /*    B
    		 |
    	      B--A--B
    	         |
    	         B */

    Case8, /*    B
    		 |
    	      B--A--B
    	         |\
    	         B B */

    Case9; /*  B B
    		\|
    	      B--A--B
    	         |\
    	         B B */



main()
{
    int i;

    int:cube c1, RandomIonPut(int:cube, int, int), OkReact(int:cube),
    		Diffuse(int:cube);
    void ZPlane(int:cube c, int x1, int x2, int y1, int y2, int z);

    Case1=Case2=Case3=Case4=Case5=Case6=Case7=Case8=Case9=0;

    with (cube)
    {
        c1 = RandomIonPut(c1, 5, 5);
        printf("Some elements are:\n");
        ZPlane(c1, 0, 20, 0, 30, 0);
	for (i=0; i<10; i++){
        c1 = OkReact(c1);
        printf("Some elements are:\n");
        ZPlane(c1, 0, 20, 0, 30, 0);
        printf("\nC (Inf h) collisions = %d. \n", Case1);
        printf("\nCase 2    collisions = %d. \n", Case2);
        printf("\nD (Inf h) collisions = %d. \n", Case3);
        printf("\nCase 4    collisions = %d. \n", Case4);
        printf("\nCase 5    collisions = %d. \n", Case5);
        printf("\nCase 6    collisions = %d. \n", Case6);
        printf("\nCase 7    collisions = %d. \n", Case7);
        printf("\nCase 8    collisions = %d. \n", Case8);
        printf("\nCase 9    collisions = %d. \n", Case9);
        c1 = Diffuse(c1);
        ZPlane(c1, 0, 20, 0, 30, 0);
	}
    }
}


int:cube RandomIonPut(int:cube c, int ca, int cb)
{
    int:cube c1;

    with (cube)
    {
        c1 = prand() % 100;
        where (c1 < ca)
            c = ACPT;
        where ((c1 >= ca) && (c1 < (ca + cb)))
            c = BCPT;
        where (c1 >= (ca + cb))
            c = SOLVENT;
        return c;
    }
}

/* Display the values of lattice nodes in the zth plane,
   from x1 to x2, and y1 to y2 inclusive.
   Checks for bounds.  */

void ZPlane(int:cube c, int x1, int x2, int y1, int y2, int z)
{
     int i, j;

     if (x1 < 0) x1 = 0;
     if (x1 >= SIDE) x1 = SIDE-1;
     if (x2 < 0) x2 = 0;
     if (x2 >= SIDE) x2 = SIDE-1;
     if (y1 < 0) y1 = 0;
     if (y1 >= SIDE) y1 = SIDE-1;
     if (y2 < 0) y2 = 0;
     if (y2 >= SIDE) y2 = SIDE-1;

     for (i=x1; i<=x2; i++)
        {
            for (j=y1; j<=y2; j++)
                printf("%2d", [i] [j] [z] c);
            printf("\n");
        }
}


/* Check that a reaction can occur with the adjacent reacted or unreacted
   components. Update the Case variables (Reflect collision geometry)
   and return the reacted cube */

int:cube OkReact(int:cube c)
{
    with (cube)
    {
    	/* C (Inf h) collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case1 = +=(int:cube)1;}
		where ((ATXM c % REACTED == BCPT)
			&& (ATXP c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case1 = +=(int:cube)1;}
		where ((ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case1 = +=(int:cube)1;}
		where ((ATYM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case1 = +=(int:cube)1;}
		where ((ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT))
			{c = RACPT; Case1 = +=(int:cube)1;}
		where ((ATZM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT))
			{c = RACPT; Case1 = +=(int:cube)1;}
	}
	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case1 = +=(int:cube)1;}
		where ((ATXM c % REACTED == ACPT)
			&& (ATXP c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case1 = +=(int:cube)1;}
		where ((ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case1 = +=(int:cube)1;}
		where ((ATYM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case1 = +=(int:cube)1;}
		where ((ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT))
			{c = RBCPT; Case1 = +=(int:cube)1;}
		where ((ATZM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT))
			{c = RBCPT; Case1 = +=(int:cube)1;}
	}

	/* Case2 Collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATYP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATYP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATYM c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
		where ((ATYM c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case2 = +=(int:cube)1;}
	}

	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATXM c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATYP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATYP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATYM c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
		where ((ATYM c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case2 = +=(int:cube)1;}
	}

	/* D (Inf h) collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case3 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case3 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case3 = +=(int:cube)1;}
	}
	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case3 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case3 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case3 = +=(int:cube)1;}
	}

	/* Case 4 collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}

		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case4 = +=(int:cube)1;}
	}

	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}

		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case4 = +=(int:cube)1;}
	}

	/* Case 5 collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}

		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}

		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case5 = +=(int:cube)1;}
	}

	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}

		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}

		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case5 = +=(int:cube)1;}
	}

	/* Case 6 collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case6 = +=(int:cube)1;}
	}

	/* Case 6 collisions */
	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case6 = +=(int:cube)1;}
	}

	/* Case 7 collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case7 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case7 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case7 = +=(int:cube)1;}
	}
	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case7 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case7 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case7 = +=(int:cube)1;}
	}

	/* Case 8 collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED != BCPT))
			{c = RACPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED != BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED != BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED != BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED != BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED != BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case8 = +=(int:cube)1;}
	}

	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED != ACPT))
			{c = RBCPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED != ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED != ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED != ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED != ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case8 = +=(int:cube)1;}
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED != ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case8 = +=(int:cube)1;}
	}

	/* Case 9 collisions */
	where (c == ACPT)
	{
		where ((ATXP c % REACTED == BCPT)
			&& (ATXM c % REACTED == BCPT)
			&& (ATYP c % REACTED == BCPT)
			&& (ATYM c % REACTED == BCPT)
			&& (ATZP c % REACTED == BCPT)
			&& (ATZM c % REACTED == BCPT))
			{c = RACPT; Case9 = +=(int:cube)1;}
	}
	where (c == BCPT)
	{
		where ((ATXP c % REACTED == ACPT)
			&& (ATXM c % REACTED == ACPT)
			&& (ATYP c % REACTED == ACPT)
			&& (ATYM c % REACTED == ACPT)
			&& (ATZP c % REACTED == ACPT)
			&& (ATZM c % REACTED == ACPT))
			{c = RBCPT; Case9 = +=(int:cube)1;}
	}
	return (c);
    }
}

/* Move an unreacted "molecule" about by one step in any direction.
   Has the weakness that it is unsymmetrical in the diagonal vs.
   axial sense. */

int:cube Diffuse(int:cube c)
{
    int:cube c1, c2, c3, dummy;

    with (cube)
    {
	where ((c < REACTED) && (c != SOLVENT))
	{
		c1 = prand() % DIFFUSEOPTS - 1; /* These lines are not
	           generalised because of the 1. Needs a #define. */
		c2 = prand() % DIFFUSEOPTS - 1;
		c3 = prand() % DIFFUSEOPTS - 1;

		dummy = [. + c1] [. + c2] [. + c3] c;
		[. + c1] [. + c2] [. + c3] c = [.] [.] [.] c;
		[.] [.] [.] c = dummy;
	}
    return (c);
    }
}
